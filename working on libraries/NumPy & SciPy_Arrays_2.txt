import numpy as np
array1=np.arange(1,17).reshape((4,4))
transpose = np.transpose(array1)
inverse = np.linalg.inv([[2,1],[3,4]])
det1 = np.linalg.det(array1)
det2=np.linalg.det([[2,1],[3,4]])
det3=np.linalg.det([[1,0],[0,1]])
norm2=np.linalg.norm([[2,1],[3,4]])
rank1=np.linalg.matrix_rank(array1)
rank2=np.linalg.matrix_rank([[1,0],[0,1]])
trace1=np.trace(array1)
print(transpose,"\n",inverse,"\n",det1,det2,det3,norm2,rank1,rank2,trace1)
matrix=np.random.random((3,4))
matrix1=np.arange(0,8).reshape((4,2))
matrix2=np.arange(0,6).reshape((2,3))
multiplication=np.matmul(matrix1,matrix2)
print(matrix1,"*",matrix2,"=",multiplication)
a = np.array([[2,0],[1,3]])
b = np.array([[1,2],[3,0]])
dot_product=np.dot(a,b) # matrix multiplication
dot_productS=np.dot([1,2,3],[4,5,6]) # dot product in 1 dimension
inner_product=np.inner(a,b) # scalar multiplication of rows i.e,dot product
inner_productS=np.inner([1,2,3],[4,5,6]) # this is same with dot product in 1 dimension
a=np.array([1,2])
b=np.array([2,1])
outer_product=np.outer(a,b) # this is matrix multiplication a*b^t defined on 1 dim
print(dot_product,dot_productS,"\n",inner_product,inner_productS,outer_product,b)
x=[[2,1],[1,4]]
y=[3,5]
r=np.linalg.solve(x,y)
print(r)